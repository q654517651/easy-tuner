import { useEffect, useRef, useState } from "react";
import { Checkbox } from "@heroui/react";

// 判断文件类型的工具函数
const isVideoFile = (filename: string): boolean => {
  const videoExts = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.webm', '.m4v'];
  const ext = filename.toLowerCase().slice(filename.lastIndexOf('.'));
  return videoExts.includes(ext);
};

type Props = {
  url: string;
  filename: string;
  caption: string;
  isSelected?: boolean;
  isLabeling?: boolean;
  onSelect?: (selected: boolean) => void;
  onDelete?: () => void;
  onAutoLabel?: () => Promise<void> | void;
  onCaptionSave?: (next: string) => Promise<void> | void;
  onUploadControl?: (index: number) => void; // 上传控制图回调
  controlImages?: { url: string; filename: string; }[]; // 控制图列表
  datasetType?: string; // 数据集类型，用于判断是否显示控制图界面
  autosaveDelay?: number;
};

export default function DatasetCard({
  url,
  filename,
  caption,
  isSelected = false,
  isLabeling = false,
  onSelect,
  onDelete,
  onAutoLabel,
  onCaptionSave,
  onUploadControl,
  controlImages,
  datasetType,
  autosaveDelay = 1800,
}: Props) {
  const [text, setText] = useState(caption ?? "");
  const savedRef = useRef(text);
  const timerRef = useRef<number | null>(null);

  // 视频相关状态
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isVideo] = useState(() => isVideoFile(filename));
  const [isHovering, setIsHovering] = useState(false);

  // 控制图相关状态
  const [currentImageIndex, setCurrentImageIndex] = useState(0); // 当前选中的图片索引：0=原图，1-3=控制图
  const isControlMode = datasetType === "image_control";

  // 构建图片列表：原图 + 控制图（最多3张）
  const imageList = isControlMode ? [
    { url, filename, type: 'original' as const },
    ...((controlImages || []).slice(0, 3).map((img, idx) => ({
      url: img.url,
      filename: img.filename,
      type: 'control' as const,
      index: idx
    })))
  ] : [{ url, filename, type: 'original' as const }];

  // 为控制图模式填充空位（确保有4个位置）
  if (isControlMode) {
    const maxImages = 4;
    while (imageList.length < maxImages) {
      imageList.push({
        url: '',
        filename: '',
        type: 'empty' as const,
        index: imageList.length - 1
      });
    }
  }

  const currentImage = imageList[currentImageIndex] || imageList[0];

  // 外部 caption 变化时同步
  useEffect(() => {
    setText(caption ?? "");
    savedRef.current = caption ?? "";
  }, [caption]);

  // 自动保存（去抖）
  useEffect(() => {
    if (!onCaptionSave) return;
    if (text === savedRef.current) return;
    if (timerRef.current) window.clearTimeout(timerRef.current);
    timerRef.current = window.setTimeout(async () => {
      if (text !== savedRef.current) {
        await onCaptionSave(text);
        savedRef.current = text;
      }
    }, autosaveDelay);
    return () => {
      if (timerRef.current) window.clearTimeout(timerRef.current);
    };
  }, [text, autosaveDelay, onCaptionSave]);

  // 立即保存：⌘/Ctrl + Enter
  const handleKeyDown = async (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if ((e.metaKey || e.ctrlKey) && e.key === "Enter" && onCaptionSave) {
      if (timerRef.current) window.clearTimeout(timerRef.current);
      await onCaptionSave(text);
      savedRef.current = text;
    }
  };

  // 视频播放控制
  useEffect(() => {
    if (!isVideo || !videoRef.current) return;

    const video = videoRef.current;

    if (isHovering) {
      // 鼠标悬浮时播放
      video.currentTime = 0; // 重新播放
      video.play().catch(() => {
        // 忽略播放失败
      });
    } else {
      // 鼠标移出时暂停
      video.pause();
    }
  }, [isHovering, isVideo]);

  // 处理媒体区域点击选中
  const handleMediaClick = () => {
    // 如果正在打标中，禁用选择
    if (isLabeling) return;

    if (onSelect) {
      onSelect(!isSelected);
    }
  };

  // 处理鼠标悬浮事件
  const handleMouseEnter = () => {
    setIsHovering(true);
  };

  const handleMouseLeave = () => {
    setIsHovering(false);
  };

  // 处理缩略图点击切换
  const handleThumbnailClick = (index: number) => {
    if (isLabeling) return;

    const targetImage = imageList[index];
    if (targetImage.type === 'empty') {
      // 点击空位，触发上传
      if (onUploadControl && index > 0) {
        onUploadControl(index - 1); // 控制图索引从0开始
      }
      return;
    }

    setCurrentImageIndex(index);
  };

  return (
    <div className={`group rounded-2xl ring-1 bg-white dark:bg-neutral-900 shadow-sm transition-all duration-200 ${
      isSelected
        ? 'ring-blue-500 ring-[2.5px]'
        : 'ring-black/10 dark:ring-white/10'
    }`}>
      {/* 上半区：媒体区 */}
      <div className="relative w-full h-52 sm:h-60 md:h-64 overflow-hidden rounded-t-2xl">
        {isControlMode ? (
          /* 控制图模式：主图区域 + 右侧缩略图列表 */
          <div className="flex h-full">
            {/* 主图区域 */}
            <div
              className="flex-1 relative cursor-pointer"
              onClick={handleMediaClick}
              onMouseEnter={handleMouseEnter}
              onMouseLeave={handleMouseLeave}
            >
              {currentImage.url ? (
                <>
                  {/* 背景模糊图 */}
                  <img
                    src={currentImage.url}
                    alt=""
                    className="absolute inset-0 w-full h-full object-cover scale-110 blur-xl brightness-[0.6]"
                    loading="lazy"
                  />
                  <div className="absolute inset-0 bg-gradient-to-b from-black/20 via-black/20 to-black/25" />

                  {/* 前景主图 */}
                  <img
                    src={currentImage.url}
                    alt={currentImage.filename}
                    className="relative z-10 w-full h-full object-contain"
                    loading="lazy"
                  />
                </>
              ) : (
                <div className="w-full h-full bg-neutral-100 dark:bg-neutral-800 flex items-center justify-center">
                  <span className="text-neutral-400 text-sm">暂无图片</span>
                </div>
              )}

              {/* 左上角选中状态 */}
              {onSelect && !isLabeling && (
                <div className="absolute top-2 left-2 z-20">
                  <Checkbox
                    isSelected={isSelected}
                    onValueChange={onSelect}
                    size="lg"
                    className="pointer-events-none"
                    classNames={{
                      base: "pointer-events-auto",
                      wrapper: "before:border-white/50 after:bg-blue-500 after:text-white bg-black/30 backdrop-blur-sm",
                    }}
                  />
                </div>
              )}

              {/* 右上角操作按钮 */}
              {!isLabeling && (
                <div className="absolute top-2 right-2 z-20 flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                  {onAutoLabel && (
                    <button
                      aria-label="打标"
                      onClick={(e) => {
                        e.stopPropagation();
                        onAutoLabel?.();
                      }}
                      className="w-9 h-9 rounded-lg bg-black/40 text-white/90 backdrop-blur grid place-items-center hover:bg-black/50"
                      title="打标"
                    >
                      🏷️
                    </button>
                  )}
                  {onDelete && (
                    <button
                      aria-label="删除"
                      onClick={(e) => {
                        e.stopPropagation();
                        onDelete?.();
                      }}
                      className="w-9 h-9 rounded-lg bg-black/40 text-white/90 backdrop-blur grid place-items-center hover:bg-black/50"
                      title="删除"
                    >
                      🗑️
                    </button>
                  )}
                </div>
              )}

              {/* 打标进行中蒙版 */}
              {isLabeling && (
                <div className="absolute inset-0 z-30 bg-black/60 backdrop-blur-sm flex flex-col items-center justify-center">
                  <div className="text-white text-sm font-medium mb-2">正在打标中...</div>
                  <div className="w-8 h-8 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                </div>
              )}
            </div>

            {/* 右侧缩略图列表 */}
            <div className="w-20 flex flex-col bg-black/10 dark:bg-white/5">
              {imageList.map((img, index) => (
                <div
                  key={index}
                  className={`flex-1 relative cursor-pointer border-b border-white/10 last:border-b-0 transition-all ${
                    currentImageIndex === index
                      ? 'ring-2 ring-blue-500'
                      : 'hover:bg-white/5'
                  }`}
                  onClick={() => handleThumbnailClick(index)}
                >
                  {img.url ? (
                    <img
                      src={img.url}
                      alt=""
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />
                  ) : (
                    <div className="w-full h-full bg-neutral-200 dark:bg-neutral-700 flex flex-col items-center justify-center">
                      <div className="text-xs text-neutral-500 mb-1">
                        {index === 0 ? '原图' : `控制${index}`}
                      </div>
                      {index > 0 && (
                        <button
                          className="text-xs px-2 py-0.5 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleThumbnailClick(index);
                          }}
                        >
                          上传
                        </button>
                      )}
                    </div>
                  )}

                  {/* 图片类型标识 */}
                  <div className="absolute bottom-1 left-1">
                    <span className="text-xs bg-black/60 text-white px-1 rounded">
                      {index === 0 ? '原' : `C${index}`}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          /* 普通模式：原有的单图布局 */
          <div
            className="relative w-full h-full cursor-pointer"
            onClick={handleMediaClick}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
          >
            {/* 背景 cover 放大 + 模糊 + 深色 */}
            {isVideo ? (
              <video
                src={url}
                className="absolute inset-0 w-full h-full object-cover scale-110 blur-xl brightness-[0.6]"
                muted
                playsInline
              />
            ) : (
              <img
                src={url}
                alt=""
                className="absolute inset-0 w-full h-full object-cover scale-110 blur-xl brightness-[0.6]"
                loading="lazy"
              />
            )}
            <div className="absolute inset-0 bg-gradient-to-b from-black/20 via-black/20 to-black/25" />

            {/* 前景：长边贴边（contain） */}
            {isVideo ? (
              <video
                ref={videoRef}
                src={url}
                className="relative z-10 w-full h-full object-contain"
                muted
                playsInline
                loop
                preload="metadata"
              />
            ) : (
              <img
                src={url}
                alt={filename}
                className="relative z-10 w-full h-full object-contain"
                loading="lazy"
              />
            )}

            {/* 左上角选中状态 Checkbox */}
            {onSelect && !isLabeling && (
              <div className="absolute top-2 left-2 z-20">
                <Checkbox
                  isSelected={isSelected}
                  onValueChange={onSelect}
                  size="lg"
                  className="pointer-events-none"
                  classNames={{
                    base: "pointer-events-auto",
                    wrapper: "before:border-white/50 after:bg-blue-500 after:text-white bg-black/30 backdrop-blur-sm",
                  }}
                />
              </div>
            )}

            {/* 打标进行中的蒙版 */}
            {isLabeling && (
              <div className="absolute inset-0 z-30 bg-black/60 backdrop-blur-sm flex flex-col items-center justify-center">
                <div className="text-white text-sm font-medium mb-2">正在打标中...</div>
                <div className="w-8 h-8 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
              </div>
            )}

            {/* 悬浮显示操作按钮：打标 + 删除 */}
            {!isLabeling && (
              <div className="absolute top-2 right-2 z-20 flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                {onAutoLabel && (
                  <button
                    aria-label="打标"
                    onClick={() => onAutoLabel?.()}
                    className="w-9 h-9 rounded-lg bg-black/40 text-white/90 backdrop-blur grid place-items-center hover:bg-black/50"
                    title="打标"
                  >
                    🏷️
                  </button>
                )}
                {onDelete && (
                  <button
                    aria-label="删除"
                    onClick={onDelete}
                    className="w-9 h-9 rounded-lg bg-black/40 text-white/90 backdrop-blur grid place-items-center hover:bg-black/50"
                    title="删除"
                  >
                    🗑️
                  </button>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* 下半区：文件名 + 可编辑打标 */}
      <div className="p-3 space-y-2">
        <div className="text-sm font-semibold truncate flex items-center gap-2">
          <span>{filename}</span>
          {isControlMode && currentImageIndex > 0 && (
            <span className="text-xs text-blue-600 bg-blue-50 px-1.5 py-0.5 rounded shrink-0">
              控制图 {currentImageIndex}
            </span>
          )}
        </div>

        <div className="rounded-2xl bg-neutral-100 dark:bg-white/10">
          <textarea
            className="w-full min-h-24 max-h-56 resize-y px-3 py-2 bg-transparent outline-none text-sm leading-6
                       placeholder:text-neutral-400 disabled:opacity-50 disabled:cursor-not-allowed"
            placeholder="输入打标内容…（⌘/Ctrl + Enter 立即保存）"
            value={text}
            onChange={(e) => setText(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={isLabeling}
          />
        </div>
      </div>
    </div>
  );
}
